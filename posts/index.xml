<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on A Single Code Dog</title>
    <link>http://chape.github.io/posts/</link>
    <description>Recent content in Posts on A Single Code Dog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 May 2017 14:45:27 +0800</lastBuildDate>
    <atom:link href="http://chape.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>macOS下代替SSH Client GUI方案</title>
      <link>http://chape.github.io/posts/tool-ssh/</link>
      <pubDate>Sat, 27 May 2017 14:45:27 +0800</pubDate>
      
      <guid>http://chape.github.io/posts/tool-ssh/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;转战macOS后，一直在寻求一款好用的SSH GUI Client。听说ZOC好像不错，用了一段时间，还是能满足日常需求，但是无法完成级联操作(比如登录跳板机后在登录某服务器)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;sshgo:d5adf6ebab6a4142fa4ce027f11aa10d&#34;&gt;SSHGO&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kaibozhou/ssh-auto-login-manage&#34;&gt;ssh-auto-login-manage&lt;/a&gt;
是一个用shell和python编写的sshClient工具，实现ssh免密码自动登录和主机管理功能。&lt;/p&gt;

&lt;h1 id=&#34;安装-配置:d5adf6ebab6a4142fa4ce027f11aa10d&#34;&gt;安装&amp;amp;配置&lt;/h1&gt;

&lt;p&gt;##下载
下载github工程：&lt;code&gt;git clone https://github.com/flying5/ssh-auto-login-manage.git&lt;/code&gt;
##配置登录服务器
添加所需登录的服务器，修改&lt;code&gt;(YOURHOME)/path/to/ssh-auto-login-manage/hosts&lt;/code&gt;文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deploy
    1.1.1.1  user1  password1
    2.2.2.2  user2  #use Public key authentication
    3.3.3.3  user3 -i /path/to/id_file.pem  #use id file to login
Online-1
    4.4.4.4 user password #跳板机
    intenal.server # 下面的服务器会以4.4.4.4作为跳板机服务器
        10.0.2.10 user3 password3
        10.0.2.11 user4 password4
Online-2
    5.5.5.5:22222 user5 password5 #use the special port
    6.6.6.6 user6 password6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##配置别名
在&lt;code&gt;~/.zshrc&lt;/code&gt;文件添加如下行：
&lt;code&gt;alias sshgo=&#39;(YOURHOME)/path/to/ssh-auto-login-manage/sshgo&#39;&lt;/code&gt;
sshgo配置完成，输入sshgo命令即可！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://okvphnw7f.bkt.clouddn.com/2017052714958617204165.png&#34; alt=&#34;运行sshgo预览&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;iterm2配置lrzsz:d5adf6ebab6a4142fa4ce027f11aa10d&#34;&gt;iTerm2配置lrzsz&lt;/h1&gt;

&lt;p&gt;lrzsz是unix下文件传输的工具，可以跟iTerm2配合使用。
##安装
&lt;code&gt;brew install lrzsz&lt;/code&gt;
##下载脚本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/local/bin
sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh
sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh
sudo chmod +x /usr/local/bin/iterm2-*
sudo chown YOURUSER:YOURGROUP /usr/local/bin/iterm2-*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##配置iTerm2
打开iTerm2，点击 Preferences &amp;gt; Profiles，选择某个默认的Profile Name，如 Default，之后继续选择 Advanced &amp;gt; Triggers &amp;gt; Edit，添加两个triggers：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Regular expression: rz waiting to receive.\*\*B0100
Action: Run Silent Coprocess
Parameters: /usr/local/bin/iterm2-send-zmodem.sh
Instant: checked

Regular expression: \*\*B00000000000000
Action: Run Silent Coprocess
Parameters: /usr/local/bin/iterm2-recv-zmodem.sh
Instant: checked
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如图：
&lt;img src=&#34;http://okvphnw7f.bkt.clouddn.com/20170527149586092688284.png&#34; alt=&#34;配置trigger&#34; /&gt;
#使用
使用sshgo选择你要登录的服务器，最后就可以使用sz 、rz命令保存和上传文件了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>基准测试</title>
      <link>http://chape.github.io/posts/benchmark/</link>
      <pubDate>Wed, 08 Feb 2017 00:44:15 +0800</pubDate>
      
      <guid>http://chape.github.io/posts/benchmark/</guid>
      <description>&lt;p&gt;#ECS基准测试
##测试环境
CentOS Linux release 7.0.1406(Linux version 3.10.0) 64bit&lt;/p&gt;

&lt;p&gt;Java HotSpot 64bit 1.8.0_60&lt;/p&gt;

&lt;p&gt;JVM parameter -Xms1g -Xmx1g -Xmn512m -Xss1M&lt;/p&gt;

&lt;p&gt;启动命令：&lt;/p&gt;

&lt;p&gt;java -Xms1g -Xmx1g -Xmn512m -Xss1M -Djava.ext.dirs={THE_THIRD_LIB} org.junit.runner.JUnitCore {JUNIT_CLASS}&lt;/p&gt;

&lt;p&gt;#CPU
##Serializa&lt;/p&gt;

&lt;p&gt;测试序列化反序列化时间，序列化与反序列化一次为per&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序列化类别&lt;/th&gt;
&lt;th&gt;响应时间(1k记录 ms/per)&lt;/th&gt;
&lt;th&gt;响应时间(1w记录 ms/per)&lt;/th&gt;
&lt;th&gt;响应时间(写10w记录 ms/per)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;java serialize&lt;/td&gt;
&lt;td&gt;1.94&lt;/td&gt;
&lt;td&gt;1.832&lt;/td&gt;
&lt;td&gt;1.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jackson&lt;/td&gt;
&lt;td&gt;0.298&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;td&gt;0.033&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fastjson&lt;/td&gt;
&lt;td&gt;0.261&lt;/td&gt;
&lt;td&gt;0.046&lt;/td&gt;
&lt;td&gt;0.021&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;gson&lt;/td&gt;
&lt;td&gt;0.488&lt;/td&gt;
&lt;td&gt;0.145&lt;/td&gt;
&lt;td&gt;0.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;messagepack&lt;/td&gt;
&lt;td&gt;0.528&lt;/td&gt;
&lt;td&gt;0.101&lt;/td&gt;
&lt;td&gt;0.048&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;protobuf&lt;/td&gt;
&lt;td&gt;0.07&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.007&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;##GeoDistance&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;计算类型&lt;/th&gt;
&lt;th&gt;响应时间(1k记录 ms)&lt;/th&gt;
&lt;th&gt;响应时间(1w记录 ms)&lt;/th&gt;
&lt;th&gt;响应时间(10w记录 ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算两个经纬度坐标的距离&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#Memory
##Object size&lt;/p&gt;

&lt;p&gt;####实例数据：
原生类型(primitive type)的内存占用如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Primitive Type&lt;/th&gt;
&lt;th&gt;Memory Required(bytes)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;####引用
压缩前：&lt;/p&gt;

&lt;p&gt;reference类型在32位系统上每个占用4bytes, 在64位系统上每个占用8bytes&lt;/p&gt;

&lt;p&gt;压缩后:&lt;/p&gt;

&lt;p&gt;reference类型在32位系统上每个占用4bytes, 在64位系统上每个占用4bytes&lt;/p&gt;

&lt;p&gt;####new HashMap&amp;lt;&amp;gt;()&lt;/p&gt;

&lt;p&gt;思路：找出HashMap及它父类所有的非static成员变量&lt;/p&gt;

&lt;p&gt;本类：引用（table、entrySet） 基础类型（size、modCount、threshold、loadFactor ）&lt;/p&gt;

&lt;p&gt;父类(AbstractMap) ：引用（keySet、values）&lt;/p&gt;

&lt;p&gt;压缩前  8(_mark) + 8(_klass) + 8(reference)*2 + 4(int)*3 + 4(float) + 8(parent reference)*2 = 64 bytes&lt;/p&gt;

&lt;p&gt;压缩后  8(_mark) + 4(_klass) + 4(reference)*2 + 4(int)*3 + 4(float) + 4(parent reference)*2 + 4(padding)= 48 bytes&lt;/p&gt;

&lt;p&gt;####HashMap&lt;Object,Object&gt; map = new HashMap&amp;lt;&amp;gt;()
####Map.put(new Object(),new Object());&lt;/p&gt;

&lt;p&gt;思路：put操作会初始化table，默认大小16
压缩前 64 + 152{8 + 8 + 4 + 8*16 + 4(padding)} + 48{8 + 8 + 4 + 8 + 8 + 8 + 4(padding)} + 16 + 16 = 296 bytes
压缩前 48 + 80{8 + 4 + 4 + 4*16} + 32{8 + 4 + 4 + 4 + 4 + 4 + 4(padding)} + 16 + 16 = 192 bytes&lt;/p&gt;

&lt;p&gt;那么HashMap的大小为 48+ 80 + (32 + 16 + 16)*N = 256 bytes （小于16*0.75）&lt;/p&gt;

&lt;p&gt;####new HashSet&amp;lt;&amp;gt;()&lt;/p&gt;

&lt;p&gt;思路：找出HashMap及它父类所有的非static成员变量&lt;/p&gt;

&lt;p&gt;本类：引用（map）&lt;/p&gt;

&lt;p&gt;对象本身：&lt;/p&gt;

&lt;p&gt;压缩前  8(_mark) + 8(_klass) + 8(reference) = 24 bytes&lt;/p&gt;

&lt;p&gt;压缩后  8(_mark) + 4(_klass) + 4(reference) = 16 bytes&lt;/p&gt;

&lt;p&gt;对象占用总的空间：&lt;/p&gt;

&lt;p&gt;压缩前  8(_mark) + 8(_klass) + 8(reference) + 64(HashMap) = 88 bytes&lt;/p&gt;

&lt;p&gt;压缩后  8(_mark) + 4(_klass) + 48(HashMap) + 4(padding)= 64 bytes&lt;/p&gt;

&lt;p&gt;####new ArrayList&amp;lt;&amp;gt;()
对象本身：&lt;/p&gt;

&lt;p&gt;压缩前 8(_mark) + 8(_klass) + 8(reference elementData) + 4(int size) + {4(parent int modCount) + 4(padding)} + 4(padding) = 40 bytes&lt;/p&gt;

&lt;p&gt;压缩后 8(_mark) + 4(_klass) + 4(reference elementData) + 4(int size) + 4(parent int modCount) = 24 bytes&lt;/p&gt;

&lt;p&gt;####工具测量
利用java object layout tool直接打印对象内存分布图(&lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jol/&#34;&gt;http://openjdk.java.net/projects/code-tools/jol/&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.PrintWriter;
import org.openjdk.jol.info.ClassLayout;

public class ArraySize {

	public static void main(String[] args) {
		PrintWriter pw = new PrintWriter(System.out, true);
		byte[] x = new byte[2];
		String current = ClassLayout.parseInstance(x).toPrintable();
		pw.println(current);
		pw.close();
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Hash put/get速度&lt;/p&gt;

&lt;p&gt;注：每条记录的平均耗时&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HashMap/redis&lt;/th&gt;
&lt;th&gt;响应时间(1k记录 ns/per)&lt;/th&gt;
&lt;th&gt;响应时间(1w记录 ns/per)&lt;/th&gt;
&lt;th&gt;响应时间(10w记录 ns/per)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMap put&lt;/td&gt;
&lt;td&gt;673&lt;/td&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;226&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;HashMap get&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;157&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;redis put&lt;/td&gt;
&lt;td&gt;0.08ms&lt;/td&gt;
&lt;td&gt;0.055ms&lt;/td&gt;
&lt;td&gt;0.0497ms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;redis get&lt;/td&gt;
&lt;td&gt;0.05ms&lt;/td&gt;
&lt;td&gt;0.049ms&lt;/td&gt;
&lt;td&gt;0.0483ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#Disk IO
##log4j写入速度&lt;/p&gt;

&lt;p&gt;命令：&lt;/p&gt;

&lt;p&gt;java -Xms1g -Xmx1g -Xmn512m -Xss1M -cp .:benchmark.jar:./junit-4.12.jar:./hamcrest-core-1.3.jar:./log4j-1.2.17.jar:./spring-core-4.2.1.RELEASE.jar org.junit.runner.JUnitCore benchmark.io.Log4jWriteTest&lt;/p&gt;

&lt;p&gt;分别测试log4j三种模式，缓存大小均设置为BufferSize=8192，测试3次响应速度取平均值&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;log4j模式&lt;/th&gt;
&lt;th&gt;响应时间(写1k行 ms)&lt;/th&gt;
&lt;th&gt;响应时间(写1w行 ms)&lt;/th&gt;
&lt;th&gt;响应时间(写10w行 ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;同步无缓存直接写入&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;703&lt;/td&gt;
&lt;td&gt;5714&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;同步有缓存写入&lt;/td&gt;
&lt;td&gt;61&lt;/td&gt;
&lt;td&gt;482&lt;/td&gt;
&lt;td&gt;4682&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;异步有缓存写入&lt;/td&gt;
&lt;td&gt;153&lt;/td&gt;
&lt;td&gt;176&lt;/td&gt;
&lt;td&gt;1629&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#Network IO
##服务器响应时间&lt;/p&gt;

&lt;p&gt;webserver采用netty+resteasy构建，测试接口直接返回“xxx”字符串&lt;/p&gt;

&lt;p&gt;命令(参照线上启动脚本)：&lt;/p&gt;

&lt;p&gt;nohup java -Xms10g -Xmx10g -Xmn4g -Xss1M -jar web.jar &amp;gt; xx.log &amp;amp;&lt;/p&gt;

&lt;p&gt;环境配置&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务器编号&lt;/th&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;服务器A&lt;/td&gt;
&lt;td&gt;4核4G&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;服务器B&lt;/td&gt;
&lt;td&gt;4核16G&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;服务器C&lt;/td&gt;
&lt;td&gt;4核16G&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;####服务器A(内网) -&amp;gt; 服务器B(内网)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;并发数(循环次数10)&lt;/th&gt;
&lt;th&gt;响应时间(ms)&lt;/th&gt;
&lt;th&gt;吞吐量(/sec)&lt;/th&gt;
&lt;th&gt;错误率 %&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1027.7&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;2488.8&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;3404.8&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;5731.3&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;7815.6&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;####服务器A(内网) -&amp;gt; SLB(内网) -&amp;gt; 服务器B(内网)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;并发数&lt;/th&gt;
&lt;th&gt;响应时间(ms)&lt;/th&gt;
&lt;th&gt;吞吐量(/sec)&lt;/th&gt;
&lt;th&gt;错误率 %&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;995&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;1896.8&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;3585.5&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;5847.3&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;7239&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;####服务器A(内网) - SLB(内网) -&amp;gt; 服务器B(内网)、服务器C(内网)
    并发数        | 响应时间(ms) |吞吐量(/sec)|错误率 %
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-| &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;
100       | 6 | 1004 | 0.00
500    | 26 | 2414.3 | 0.00
1000       | 29 | 3023.9 | 0.00
5000       | 19 | 6460.8 | 0.00
10000      | 11| 7181.3 | 0.00&lt;/p&gt;

&lt;p&gt;####服务器A(外网) - SLB(外网) -&amp;gt; 服务器B(内网)、服务器C(内网)&lt;br /&gt;
    并发数        | 响应时间(ms) |吞吐量(/sec)|错误率 %
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-| &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;
100       | 4 | 1027.7 | 0.00
500    | 18 | 2676.7 | 0.00
1000       | 18 | 2542.6 | 0.00
5000       | 984 | 1630.5 | 0.00
10000      | 1631 | 715.6 | 1.30&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>微信支付</title>
      <link>http://chape.github.io/posts/weixin-pay/</link>
      <pubDate>Fri, 03 Jun 2016 14:45:27 +0800</pubDate>
      
      <guid>http://chape.github.io/posts/weixin-pay/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;最近产品需求在App中添加微信支付功能，网上也有不少资料，但都太杂了，这里将服务端具体实现流程与踩的坑记录下来，便于以后查阅^_^&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;前言:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;前言&lt;/h1&gt;

&lt;h3 id=&#34;参考文献:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;参考文献:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_3&#34;&gt;微信支付开发文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pay.weixin.qq.com/wiki/tools/signverify/&#34;&gt;微信公众平台支付接口调试工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Frankhbu/WxPay/tree/master/src/com/zishu/web&#34;&gt;GitHub WxPay参考库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://magicly.me/2015/07/26/ssh-reverse-tunnel-wx-local/&#34;&gt;利用SSH反向通道在本地调试微信公共号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;开始:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;开始：&lt;/h1&gt;

&lt;h3 id=&#34;微信支付交互时序图:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;微信支付交互时序图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://pay.weixin.qq.com/wiki/doc/api/img/chapter8_3_1.png&#34; alt=&#34;微信支付交互时序图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;根据官方提供的时序图，我们需要明确后端需要提供三个接口:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;预下单接口（与客户端交互）&lt;/li&gt;
&lt;li&gt;微信回调接口（与微信服务器交互）&lt;/li&gt;
&lt;li&gt;支付查询接口（与客户端交互）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;预下单接口:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;预下单接口&lt;/h3&gt;

&lt;p&gt;比如我们可以命名为：&lt;em&gt;&lt;a href=&#34;http://xxx.com/weixinpay/preOrder&#34;&gt;http://xxx.com/weixinpay/preOrder&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;headerParam 用户ip&lt;/li&gt;
&lt;li&gt;headerParam 用户access_token&lt;/li&gt;
&lt;li&gt;formParam 充值商品id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;业务步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;生成本地系统订单号&lt;code&gt;out_trade_no&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;组装待提交给&lt;strong&gt;微信统一下单API&lt;/strong&gt;所需的数据(微信应用号&lt;code&gt;app_id&lt;/code&gt;,商户号&lt;code&gt;mch_id&lt;/code&gt;,微信回调&lt;code&gt;notify_url&lt;/code&gt;,商品详情&lt;code&gt;body&lt;/code&gt;,本地商户订单号&lt;code&gt;out_trade_no&lt;/code&gt;,支付金额&lt;code&gt;total_fee&lt;/code&gt;,用户ip &lt;code&gt;spbill_create_ip&lt;/code&gt;,支付类型&lt;code&gt;trade_type&lt;/code&gt; NATIVE/APP/JSAPI/WAP)，并根据前面的数据生成签名&lt;code&gt;sign&lt;/code&gt;,最后组装为XML提交给&lt;strong&gt;微信统一下单API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;请求微信统一下单接口并组织返回结果数据(XML)&lt;/li&gt;
&lt;li&gt;根据结果数据组织客户端协商定义的数据格式，并序列化传给客户端(先检查数据结果中签名与本地签名是否一致，根据微信应用号&lt;code&gt;app_id&lt;/code&gt;,时间戳&lt;code&gt;time_stamp&lt;/code&gt;,随机字符串&lt;code&gt;nonce_str&lt;/code&gt;,预付订单号&lt;code&gt;prepay_id&lt;/code&gt;,签名方式&lt;code&gt;sign_type&lt;/code&gt;,产生签名&lt;code&gt;sign&lt;/code&gt;，最后序列化到客户端)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;微信回调接口:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;微信回调接口&lt;/h3&gt;

&lt;p&gt;用户支付后，微信服务器将调用此接口&lt;code&gt;notify_url&lt;/code&gt;,本接口只与微信交互，consumes和produces均使用application/xml,本人使用&lt;code&gt;org.jboss.resteasy:resteasy-jaxb-provider:2.2.0.GA&lt;/code&gt;将XML数据直接转换为javabean。&lt;/p&gt;

&lt;p&gt;比如我们可以命名为：&lt;em&gt;&lt;a href=&#34;http://xxx.com/weixinpay/callback&#34;&gt;http://xxx.com/weixinpay/callback&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;业务步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;根据微信传递的请求数据生成签名，并校验来自微信的签名&lt;/li&gt;
&lt;li&gt;根据微信回调支付结果修改本地订单号&lt;code&gt;out_trade_no&lt;/code&gt;状态&lt;/li&gt;
&lt;li&gt;返回微信服务器xml信息&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;查询订单接口:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;查询订单接口&lt;/h3&gt;

&lt;p&gt;客户端传递本地订单号&lt;code&gt;outTradeNo&lt;/code&gt;或微信订单号&lt;code&gt;transaction_id&lt;/code&gt;查询订单状态&lt;/p&gt;

&lt;p&gt;比如我们可以命名为：&lt;em&gt;&lt;a href=&#34;http://xxx.com/weixinpay/order&#34;&gt;http://xxx.com/weixinpay/order&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;queryParam out_trade_no&lt;/li&gt;
&lt;li&gt;queryParam 微信订单流水号transaction_id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;业务步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取客户端订单号，根据微信&lt;code&gt;app_id&lt;/code&gt;,商户&lt;code&gt;mch_id&lt;/code&gt;,本地订单号&lt;code&gt;outTradeNo&lt;/code&gt;或微信订单号&lt;code&gt;transaction_id&lt;/code&gt;,随机字符串&lt;code&gt;nonce_str&lt;/code&gt;,计算签名&lt;code&gt;sign&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;POST请求，提交第一步的XML数据至&lt;strong&gt;微信查询订单API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;获取响应数据，校验签名，并比对本地订单状态，返回客户端订单状态&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;注意事项:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;注意事项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;字段需按照字母顺序，除去sign字段，并且最后加上key=API_KEY使用MD5签名,可以比对&lt;a href=&#34;https://pay.weixin.qq.com/wiki/tools/signverify/&#34;&gt;微信公众平台支付接口调试工具&lt;/a&gt;验证签名正确性。&lt;/li&gt;
&lt;li&gt;本地机器做回调测试时，一般没有公网ip，可以使用在公网机器反向代理到本地&lt;code&gt;ssh -R :[10001]:[localhost]:[8001] root@[公网ip] -i ~/.ssh/pub_rsa&lt;/code&gt;,其它测试方式可参考&lt;a href=&#34;http://magicly.me/2015/07/26/ssh-reverse-tunnel-wx-local/&#34;&gt;利用SSH反向通道在本地调试微信公共号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;微信接口：

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;微信统一下单API&lt;/strong&gt;&lt;code&gt;https://api.mch.weixin.qq.com/pay/unifiedorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微信查询订单API&lt;/strong&gt;&lt;code&gt;https://api.mch.weixin.qq.com/pay/orderquery&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>记录我的博客</title>
      <link>http://chape.github.io/posts/first-post/</link>
      <pubDate>Wed, 18 May 2016 13:45:27 +0800</pubDate>
      
      <guid>http://chape.github.io/posts/first-post/</guid>
      <description>

&lt;p&gt;这是我的第一篇博客,先尿个尿标记下如何使用git pages创建个人博客吧，^_^&lt;/p&gt;

&lt;h1 id=&#34;准备:f779394c000b834c435e35a4c53a5ecd&#34;&gt;准备&lt;/h1&gt;

&lt;h3 id=&#34;操作环境:f779394c000b834c435e35a4c53a5ecd&#34;&gt;操作环境:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;mac OSX&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;工具:f779394c000b834c435e35a4c53a5ecd&#34;&gt;工具：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;iTerm&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;li&gt;brew&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;账户:f779394c000b834c435e35a4c53a5ecd&#34;&gt;账户：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;github账户&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;开始:f779394c000b834c435e35a4c53a5ecd&#34;&gt;开始：&lt;/h1&gt;

&lt;h3 id=&#34;安装hugo:f779394c000b834c435e35a4c53a5ecd&#34;&gt;安装Hugo&lt;/h3&gt;

&lt;p&gt;使用brew安装hugo,&lt;code&gt;brew install hugo&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;初始化本地站点:f779394c000b834c435e35a4c53a5ecd&#34;&gt;初始化本地站点&lt;/h3&gt;

&lt;p&gt;使用hugo命令&lt;code&gt;hugo new site YOUR_LOCAL_DIR&lt;/code&gt;,运行后YOUR_LOCAL_DIR下会产生如下目录结构：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;archetypes&lt;/li&gt;
&lt;li&gt;content&lt;/li&gt;
&lt;li&gt;layouts&lt;/li&gt;
&lt;li&gt;static&lt;/li&gt;
&lt;li&gt;config.toml&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;目录解析:f779394c000b834c435e35a4c53a5ecd&#34;&gt;目录解析&lt;/h3&gt;

&lt;p&gt;archetypes目录还母鸡这个是用来干嘛的，和maven脚手架应该差不多，简化创建过程用的吧。content目录存放markdown文章，layouts目录存放网站的布局模板文件，static目录里放的是一些图片、css、js等资源。进入YOUR_LOCAL_DIR目录,&lt;code&gt;cd YOUR_LOCAL_DIR&lt;/code&gt;，创建博客MD文件，&lt;code&gt;hugo new post/first_post.md&lt;/code&gt;,之后在content/post目录会生成一个MarkDown格式的first_post.md文件。&lt;/p&gt;

&lt;h3 id=&#34;获取主题:f779394c000b834c435e35a4c53a5ecd&#34;&gt;获取主题&lt;/h3&gt;

&lt;p&gt;还是在YOUR_LOCAL_DIR目录下，创建一个存放主题的themes目录&lt;code&gt;mkdir themes&lt;/code&gt;,进入themes目录，下载一个你喜欢的主题&lt;br&gt;
    &lt;code&gt;git clone &lt;a href=&#34;https://github.com/jpescador/hugo-future-imperfect.git&#34;&gt;https://github.com/jpescador/hugo-future-imperfect.git&lt;/a&gt;&lt;/code&gt;&lt;br&gt;
    主题皮肤列表（&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;点这里&lt;/a&gt;）,开启本地调试模式(方便预览与调试)&lt;br&gt;
    &lt;code&gt;hugo server &amp;ndash;theme=hugo-future-imperfect &amp;ndash;buildDrafts &amp;ndash;watch&lt;/code&gt;&lt;br&gt;
    编译并产生博客静态资源&lt;br&gt;
    &lt;code&gt;hugo &amp;ndash;theme=hugo-future-imperfect &amp;ndash;baseUrl=&amp;ldquo;&lt;a href=&#34;http://YOUR_GITHUB_ACCOUNT.github.io/&amp;quot;&#34;&gt;http://YOUR_GITHUB_ACCOUNT.github.io/&amp;quot;&lt;/a&gt;&lt;/code&gt;&lt;br&gt;
    这样目录会产生public目录和下面各种js、css、html静态资源，这些就是我们博客网站展现的资源，即后面要上传到github的东东。&lt;/p&gt;

&lt;h3 id=&#34;提交至github:f779394c000b834c435e35a4c53a5ecd&#34;&gt;提交至Github&lt;/h3&gt;

&lt;p&gt;好了，终于到了github登场了。在github上创建一个存放你的博客内容的仓库,取名为&lt;code&gt;YOUR_GITHUB_ACCOUNT.github.io&lt;/code&gt;,进入public目录，执行如下git命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git remote add origin https://github.com/YOUR_GITHUB_ACCOUNT/YOUR_GITHUB_ACCOUNT.github.io.git
git add -A
git commit -m &amp;quot;first commit&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;嗯,到此你就可以访问&lt;a&gt;&lt;a href=&#34;http://YOUR_GITHUB_ACCOUNT.github.io&#34;&gt;http://YOUR_GITHUB_ACCOUNT.github.io&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;日常新建博客:f779394c000b834c435e35a4c53a5ecd&#34;&gt;日常新建博客&lt;/h3&gt;

&lt;p&gt;如果想添加新的博客，则重复在YOUR_LOCAL_DIR(即content上级目录)目录运行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new posts/second_post.md
hugo 
hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后进入public目录的git repo提交修改到github即可。&lt;/p&gt;

&lt;p&gt;打完收工！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>