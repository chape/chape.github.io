<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test on A Single Code Dog</title>
    <link>http://chape.github.io/tags/test/</link>
    <description>Recent content in Test on A Single Code Dog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Feb 2017 00:44:15 +0800</lastBuildDate>
    <atom:link href="http://chape.github.io/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>基准测试</title>
      <link>http://chape.github.io/posts/benchmark/</link>
      <pubDate>Wed, 08 Feb 2017 00:44:15 +0800</pubDate>
      
      <guid>http://chape.github.io/posts/benchmark/</guid>
      <description>&lt;p&gt;#ECS基准测试
##测试环境
CentOS Linux release 7.0.1406(Linux version 3.10.0) 64bit&lt;/p&gt;

&lt;p&gt;Java HotSpot 64bit 1.8.0_60&lt;/p&gt;

&lt;p&gt;JVM parameter -Xms1g -Xmx1g -Xmn512m -Xss1M&lt;/p&gt;

&lt;p&gt;启动命令：&lt;/p&gt;

&lt;p&gt;java -Xms1g -Xmx1g -Xmn512m -Xss1M -Djava.ext.dirs={THE_THIRD_LIB} org.junit.runner.JUnitCore {JUNIT_CLASS}&lt;/p&gt;

&lt;p&gt;#CPU
##Serializa&lt;/p&gt;

&lt;p&gt;测试序列化反序列化时间，序列化与反序列化一次为per&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序列化类别&lt;/th&gt;
&lt;th&gt;响应时间(1k记录 ms/per)&lt;/th&gt;
&lt;th&gt;响应时间(1w记录 ms/per)&lt;/th&gt;
&lt;th&gt;响应时间(写10w记录 ms/per)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;java serialize&lt;/td&gt;
&lt;td&gt;1.94&lt;/td&gt;
&lt;td&gt;1.832&lt;/td&gt;
&lt;td&gt;1.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;jackson&lt;/td&gt;
&lt;td&gt;0.298&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;td&gt;0.033&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fastjson&lt;/td&gt;
&lt;td&gt;0.261&lt;/td&gt;
&lt;td&gt;0.046&lt;/td&gt;
&lt;td&gt;0.021&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;gson&lt;/td&gt;
&lt;td&gt;0.488&lt;/td&gt;
&lt;td&gt;0.145&lt;/td&gt;
&lt;td&gt;0.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;messagepack&lt;/td&gt;
&lt;td&gt;0.528&lt;/td&gt;
&lt;td&gt;0.101&lt;/td&gt;
&lt;td&gt;0.048&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;protobuf&lt;/td&gt;
&lt;td&gt;0.07&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.007&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;##GeoDistance&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;计算类型&lt;/th&gt;
&lt;th&gt;响应时间(1k记录 ms)&lt;/th&gt;
&lt;th&gt;响应时间(1w记录 ms)&lt;/th&gt;
&lt;th&gt;响应时间(10w记录 ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算两个经纬度坐标的距离&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#Memory
##Object size&lt;/p&gt;

&lt;p&gt;####实例数据：
原生类型(primitive type)的内存占用如下：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Primitive Type&lt;/th&gt;
&lt;th&gt;Memory Required(bytes)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;####引用
压缩前：&lt;/p&gt;

&lt;p&gt;reference类型在32位系统上每个占用4bytes, 在64位系统上每个占用8bytes&lt;/p&gt;

&lt;p&gt;压缩后:&lt;/p&gt;

&lt;p&gt;reference类型在32位系统上每个占用4bytes, 在64位系统上每个占用4bytes&lt;/p&gt;

&lt;p&gt;####new HashMap&amp;lt;&amp;gt;()&lt;/p&gt;

&lt;p&gt;思路：找出HashMap及它父类所有的非static成员变量&lt;/p&gt;

&lt;p&gt;本类：引用（table、entrySet） 基础类型（size、modCount、threshold、loadFactor ）&lt;/p&gt;

&lt;p&gt;父类(AbstractMap) ：引用（keySet、values）&lt;/p&gt;

&lt;p&gt;压缩前  8(_mark) + 8(_klass) + 8(reference)*2 + 4(int)*3 + 4(float) + 8(parent reference)*2 = 64 bytes&lt;/p&gt;

&lt;p&gt;压缩后  8(_mark) + 4(_klass) + 4(reference)*2 + 4(int)*3 + 4(float) + 4(parent reference)*2 + 4(padding)= 48 bytes&lt;/p&gt;

&lt;p&gt;####HashMap&lt;Object,Object&gt; map = new HashMap&amp;lt;&amp;gt;()
####Map.put(new Object(),new Object());&lt;/p&gt;

&lt;p&gt;思路：put操作会初始化table，默认大小16
压缩前 64 + 152{8 + 8 + 4 + 8*16 + 4(padding)} + 48{8 + 8 + 4 + 8 + 8 + 8 + 4(padding)} + 16 + 16 = 296 bytes
压缩前 48 + 80{8 + 4 + 4 + 4*16} + 32{8 + 4 + 4 + 4 + 4 + 4 + 4(padding)} + 16 + 16 = 192 bytes&lt;/p&gt;

&lt;p&gt;那么HashMap的大小为 48+ 80 + (32 + 16 + 16)*N = 256 bytes （小于16*0.75）&lt;/p&gt;

&lt;p&gt;####new HashSet&amp;lt;&amp;gt;()&lt;/p&gt;

&lt;p&gt;思路：找出HashMap及它父类所有的非static成员变量&lt;/p&gt;

&lt;p&gt;本类：引用（map）&lt;/p&gt;

&lt;p&gt;对象本身：&lt;/p&gt;

&lt;p&gt;压缩前  8(_mark) + 8(_klass) + 8(reference) = 24 bytes&lt;/p&gt;

&lt;p&gt;压缩后  8(_mark) + 4(_klass) + 4(reference) = 16 bytes&lt;/p&gt;

&lt;p&gt;对象占用总的空间：&lt;/p&gt;

&lt;p&gt;压缩前  8(_mark) + 8(_klass) + 8(reference) + 64(HashMap) = 88 bytes&lt;/p&gt;

&lt;p&gt;压缩后  8(_mark) + 4(_klass) + 48(HashMap) + 4(padding)= 64 bytes&lt;/p&gt;

&lt;p&gt;####new ArrayList&amp;lt;&amp;gt;()
对象本身：&lt;/p&gt;

&lt;p&gt;压缩前 8(_mark) + 8(_klass) + 8(reference elementData) + 4(int size) + {4(parent int modCount) + 4(padding)} + 4(padding) = 40 bytes&lt;/p&gt;

&lt;p&gt;压缩后 8(_mark) + 4(_klass) + 4(reference elementData) + 4(int size) + 4(parent int modCount) = 24 bytes&lt;/p&gt;

&lt;p&gt;####工具测量
利用java object layout tool直接打印对象内存分布图(&lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jol/&#34;&gt;http://openjdk.java.net/projects/code-tools/jol/&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.PrintWriter;
import org.openjdk.jol.info.ClassLayout;

public class ArraySize {

	public static void main(String[] args) {
		PrintWriter pw = new PrintWriter(System.out, true);
		byte[] x = new byte[2];
		String current = ClassLayout.parseInstance(x).toPrintable();
		pw.println(current);
		pw.close();
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Hash put/get速度&lt;/p&gt;

&lt;p&gt;注：每条记录的平均耗时&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HashMap/redis&lt;/th&gt;
&lt;th&gt;响应时间(1k记录 ns/per)&lt;/th&gt;
&lt;th&gt;响应时间(1w记录 ns/per)&lt;/th&gt;
&lt;th&gt;响应时间(10w记录 ns/per)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMap put&lt;/td&gt;
&lt;td&gt;673&lt;/td&gt;
&lt;td&gt;234&lt;/td&gt;
&lt;td&gt;226&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;HashMap get&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;157&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;redis put&lt;/td&gt;
&lt;td&gt;0.08ms&lt;/td&gt;
&lt;td&gt;0.055ms&lt;/td&gt;
&lt;td&gt;0.0497ms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;redis get&lt;/td&gt;
&lt;td&gt;0.05ms&lt;/td&gt;
&lt;td&gt;0.049ms&lt;/td&gt;
&lt;td&gt;0.0483ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#Disk IO
##log4j写入速度&lt;/p&gt;

&lt;p&gt;命令：&lt;/p&gt;

&lt;p&gt;java -Xms1g -Xmx1g -Xmn512m -Xss1M -cp .:benchmark.jar:./junit-4.12.jar:./hamcrest-core-1.3.jar:./log4j-1.2.17.jar:./spring-core-4.2.1.RELEASE.jar org.junit.runner.JUnitCore benchmark.io.Log4jWriteTest&lt;/p&gt;

&lt;p&gt;分别测试log4j三种模式，缓存大小均设置为BufferSize=8192，测试3次响应速度取平均值&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;log4j模式&lt;/th&gt;
&lt;th&gt;响应时间(写1k行 ms)&lt;/th&gt;
&lt;th&gt;响应时间(写1w行 ms)&lt;/th&gt;
&lt;th&gt;响应时间(写10w行 ms)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;同步无缓存直接写入&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;703&lt;/td&gt;
&lt;td&gt;5714&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;同步有缓存写入&lt;/td&gt;
&lt;td&gt;61&lt;/td&gt;
&lt;td&gt;482&lt;/td&gt;
&lt;td&gt;4682&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;异步有缓存写入&lt;/td&gt;
&lt;td&gt;153&lt;/td&gt;
&lt;td&gt;176&lt;/td&gt;
&lt;td&gt;1629&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#Network IO
##服务器响应时间&lt;/p&gt;

&lt;p&gt;webserver采用netty+resteasy构建，测试接口直接返回“xxx”字符串&lt;/p&gt;

&lt;p&gt;命令(参照线上启动脚本)：&lt;/p&gt;

&lt;p&gt;nohup java -Xms10g -Xmx10g -Xmn4g -Xss1M -jar web.jar &amp;gt; xx.log &amp;amp;&lt;/p&gt;

&lt;p&gt;环境配置&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务器编号&lt;/th&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;服务器A&lt;/td&gt;
&lt;td&gt;4核4G&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;服务器B&lt;/td&gt;
&lt;td&gt;4核16G&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;服务器C&lt;/td&gt;
&lt;td&gt;4核16G&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;####服务器A(内网) -&amp;gt; 服务器B(内网)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;并发数(循环次数10)&lt;/th&gt;
&lt;th&gt;响应时间(ms)&lt;/th&gt;
&lt;th&gt;吞吐量(/sec)&lt;/th&gt;
&lt;th&gt;错误率 %&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1027.7&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;2488.8&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;3404.8&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;5731.3&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;7815.6&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;####服务器A(内网) -&amp;gt; SLB(内网) -&amp;gt; 服务器B(内网)&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;并发数&lt;/th&gt;
&lt;th&gt;响应时间(ms)&lt;/th&gt;
&lt;th&gt;吞吐量(/sec)&lt;/th&gt;
&lt;th&gt;错误率 %&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;995&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;1896.8&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;3585.5&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;5847.3&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;7239&lt;/td&gt;
&lt;td&gt;0.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;####服务器A(内网) - SLB(内网) -&amp;gt; 服务器B(内网)、服务器C(内网)
    并发数        | 响应时间(ms) |吞吐量(/sec)|错误率 %
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-| &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;
100       | 6 | 1004 | 0.00
500    | 26 | 2414.3 | 0.00
1000       | 29 | 3023.9 | 0.00
5000       | 19 | 6460.8 | 0.00
10000      | 11| 7181.3 | 0.00&lt;/p&gt;

&lt;p&gt;####服务器A(外网) - SLB(外网) -&amp;gt; 服务器B(内网)、服务器C(内网)&lt;br /&gt;
    并发数        | 响应时间(ms) |吞吐量(/sec)|错误率 %
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-| &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;
100       | 4 | 1027.7 | 0.00
500    | 18 | 2676.7 | 0.00
1000       | 18 | 2542.6 | 0.00
5000       | 984 | 1630.5 | 0.00
10000      | 1631 | 715.6 | 1.30&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>