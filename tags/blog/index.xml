<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on A Single Code Dog</title>
    <link>http://chape.github.io/tags/blog/</link>
    <description>Recent content in Blog on A Single Code Dog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Jun 2016 14:45:27 +0800</lastBuildDate>
    <atom:link href="http://chape.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>微信支付</title>
      <link>http://chape.github.io/posts/weixin-pay/</link>
      <pubDate>Fri, 03 Jun 2016 14:45:27 +0800</pubDate>
      
      <guid>http://chape.github.io/posts/weixin-pay/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;最近产品需求在App中添加微信支付功能，网上也有不少资料，但都太杂了，这里将服务端具体实现流程与踩的坑记录下来，便于以后查阅^_^&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;前言:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;前言&lt;/h1&gt;

&lt;h3 id=&#34;参考文献:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;参考文献:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_3&#34;&gt;微信支付开发文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pay.weixin.qq.com/wiki/tools/signverify/&#34;&gt;微信公众平台支付接口调试工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Frankhbu/WxPay/tree/master/src/com/zishu/web&#34;&gt;GitHub WxPay参考库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://magicly.me/2015/07/26/ssh-reverse-tunnel-wx-local/&#34;&gt;利用SSH反向通道在本地调试微信公共号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;开始:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;开始：&lt;/h1&gt;

&lt;h3 id=&#34;微信支付交互时序图:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;微信支付交互时序图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://pay.weixin.qq.com/wiki/doc/api/img/chapter8_3_1.png&#34; alt=&#34;微信支付交互时序图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;根据官方提供的时序图，我们需要明确后端需要提供三个接口:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;预下单接口（与客户端交互）&lt;/li&gt;
&lt;li&gt;微信回调接口（与微信服务器交互）&lt;/li&gt;
&lt;li&gt;支付查询接口（与客户端交互）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;预下单接口:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;预下单接口&lt;/h3&gt;

&lt;p&gt;比如我们可以命名为：&lt;em&gt;&lt;a href=&#34;http://xxx.com/weixinpay/preOrder&#34;&gt;http://xxx.com/weixinpay/preOrder&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;headerParam 用户ip&lt;/li&gt;
&lt;li&gt;headerParam 用户access_token&lt;/li&gt;
&lt;li&gt;formParam 充值商品id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;业务步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;生成本地系统订单号&lt;code&gt;out_trade_no&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;组装待提交给&lt;strong&gt;微信统一下单API&lt;/strong&gt;所需的数据(微信应用号&lt;code&gt;app_id&lt;/code&gt;,商户号&lt;code&gt;mch_id&lt;/code&gt;,微信回调&lt;code&gt;notify_url&lt;/code&gt;,商品详情&lt;code&gt;body&lt;/code&gt;,本地商户订单号&lt;code&gt;out_trade_no&lt;/code&gt;,支付金额&lt;code&gt;total_fee&lt;/code&gt;,用户ip &lt;code&gt;spbill_create_ip&lt;/code&gt;,支付类型&lt;code&gt;trade_type&lt;/code&gt; NATIVE/APP/JSAPI/WAP)，并根据前面的数据生成签名&lt;code&gt;sign&lt;/code&gt;,最后组装为XML提交给&lt;strong&gt;微信统一下单API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;请求微信统一下单接口并组织返回结果数据(XML)&lt;/li&gt;
&lt;li&gt;根据结果数据组织客户端协商定义的数据格式，并序列化传给客户端(先检查数据结果中签名与本地签名是否一致，根据微信应用号&lt;code&gt;app_id&lt;/code&gt;,时间戳&lt;code&gt;time_stamp&lt;/code&gt;,随机字符串&lt;code&gt;nonce_str&lt;/code&gt;,预付订单号&lt;code&gt;prepay_id&lt;/code&gt;,签名方式&lt;code&gt;sign_type&lt;/code&gt;,产生签名&lt;code&gt;sign&lt;/code&gt;，最后序列化到客户端)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;微信回调接口:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;微信回调接口&lt;/h3&gt;

&lt;p&gt;用户支付后，微信服务器将调用此接口&lt;code&gt;notify_url&lt;/code&gt;,本接口只与微信交互，consumes和produces均使用application/xml,本人使用&lt;code&gt;org.jboss.resteasy:resteasy-jaxb-provider:2.2.0.GA&lt;/code&gt;将XML数据直接转换为javabean。&lt;/p&gt;

&lt;p&gt;比如我们可以命名为：&lt;em&gt;&lt;a href=&#34;http://xxx.com/weixinpay/callback&#34;&gt;http://xxx.com/weixinpay/callback&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;业务步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;根据微信传递的请求数据生成签名，并校验来自微信的签名&lt;/li&gt;
&lt;li&gt;根据微信回调支付结果修改本地订单号&lt;code&gt;out_trade_no&lt;/code&gt;状态&lt;/li&gt;
&lt;li&gt;返回微信服务器xml信息&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;查询订单接口:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;查询订单接口&lt;/h3&gt;

&lt;p&gt;客户端传递本地订单号&lt;code&gt;outTradeNo&lt;/code&gt;或微信订单号&lt;code&gt;transaction_id&lt;/code&gt;查询订单状态&lt;/p&gt;

&lt;p&gt;比如我们可以命名为：&lt;em&gt;&lt;a href=&#34;http://xxx.com/weixinpay/order&#34;&gt;http://xxx.com/weixinpay/order&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;queryParam out_trade_no&lt;/li&gt;
&lt;li&gt;queryParam 微信订单流水号transaction_id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;业务步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取客户端订单号，根据微信&lt;code&gt;app_id&lt;/code&gt;,商户&lt;code&gt;mch_id&lt;/code&gt;,本地订单号&lt;code&gt;outTradeNo&lt;/code&gt;或微信订单号&lt;code&gt;transaction_id&lt;/code&gt;,随机字符串&lt;code&gt;nonce_str&lt;/code&gt;,计算签名&lt;code&gt;sign&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;POST请求，提交第一步的XML数据至&lt;strong&gt;微信查询订单API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;获取响应数据，校验签名，并比对本地订单状态，返回客户端订单状态&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;注意事项:afe97a3c42ed9aeaeeb755ae9e2dca75&#34;&gt;注意事项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;字段需按照字母顺序，除去sign字段，并且最后加上key=API_KEY使用MD5签名,可以比对&lt;a href=&#34;https://pay.weixin.qq.com/wiki/tools/signverify/&#34;&gt;微信公众平台支付接口调试工具&lt;/a&gt;验证签名正确性。&lt;/li&gt;
&lt;li&gt;本地机器做回调测试时，一般没有公网ip，可以使用在公网机器反向代理到本地&lt;code&gt;ssh -R :[10001]:[localhost]:[8001] root@[公网ip] -i ~/.ssh/pub_rsa&lt;/code&gt;,其它测试方式可参考&lt;a href=&#34;http://magicly.me/2015/07/26/ssh-reverse-tunnel-wx-local/&#34;&gt;利用SSH反向通道在本地调试微信公共号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;微信接口：

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;微信统一下单API&lt;/strong&gt;&lt;code&gt;https://api.mch.weixin.qq.com/pay/unifiedorder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微信查询订单API&lt;/strong&gt;&lt;code&gt;https://api.mch.weixin.qq.com/pay/orderquery&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>记录我的博客</title>
      <link>http://chape.github.io/posts/first-post/</link>
      <pubDate>Wed, 18 May 2016 13:45:27 +0800</pubDate>
      
      <guid>http://chape.github.io/posts/first-post/</guid>
      <description>

&lt;p&gt;这是我的第一篇博客,先尿个尿标记下如何使用git pages创建个人博客吧，^_^&lt;/p&gt;

&lt;h1 id=&#34;准备:f779394c000b834c435e35a4c53a5ecd&#34;&gt;准备&lt;/h1&gt;

&lt;h3 id=&#34;操作环境:f779394c000b834c435e35a4c53a5ecd&#34;&gt;操作环境:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;mac OSX&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;工具:f779394c000b834c435e35a4c53a5ecd&#34;&gt;工具：&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;iTerm&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;li&gt;brew&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;账户:f779394c000b834c435e35a4c53a5ecd&#34;&gt;账户：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;github账户&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;开始:f779394c000b834c435e35a4c53a5ecd&#34;&gt;开始：&lt;/h1&gt;

&lt;h3 id=&#34;安装hugo:f779394c000b834c435e35a4c53a5ecd&#34;&gt;安装Hugo&lt;/h3&gt;

&lt;p&gt;使用brew安装hugo,&lt;code&gt;brew install hugo&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;初始化本地站点:f779394c000b834c435e35a4c53a5ecd&#34;&gt;初始化本地站点&lt;/h3&gt;

&lt;p&gt;使用hugo命令&lt;code&gt;hugo new site YOUR_LOCAL_DIR&lt;/code&gt;,运行后YOUR_LOCAL_DIR下会产生如下目录结构：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;archetypes&lt;/li&gt;
&lt;li&gt;content&lt;/li&gt;
&lt;li&gt;layouts&lt;/li&gt;
&lt;li&gt;static&lt;/li&gt;
&lt;li&gt;config.toml&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;目录解析:f779394c000b834c435e35a4c53a5ecd&#34;&gt;目录解析&lt;/h3&gt;

&lt;p&gt;archetypes目录还母鸡这个是用来干嘛的，和maven脚手架应该差不多，简化创建过程用的吧。content目录存放markdown文章，layouts目录存放网站的布局模板文件，static目录里放的是一些图片、css、js等资源。进入YOUR_LOCAL_DIR目录,&lt;code&gt;cd YOUR_LOCAL_DIR&lt;/code&gt;，创建博客MD文件，&lt;code&gt;hugo new post/first_post.md&lt;/code&gt;,之后在content/post目录会生成一个MarkDown格式的first_post.md文件。&lt;/p&gt;

&lt;h3 id=&#34;获取主题:f779394c000b834c435e35a4c53a5ecd&#34;&gt;获取主题&lt;/h3&gt;

&lt;p&gt;还是在YOUR_LOCAL_DIR目录下，创建一个存放主题的themes目录&lt;code&gt;mkdir themes&lt;/code&gt;,进入themes目录，下载一个你喜欢的主题&lt;br&gt;
    &lt;code&gt;git clone &lt;a href=&#34;https://github.com/jpescador/hugo-future-imperfect.git&#34;&gt;https://github.com/jpescador/hugo-future-imperfect.git&lt;/a&gt;&lt;/code&gt;&lt;br&gt;
    主题皮肤列表（&lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;点这里&lt;/a&gt;）,开启本地调试模式(方便预览与调试)&lt;br&gt;
    &lt;code&gt;hugo server &amp;ndash;theme=hugo-future-imperfect &amp;ndash;buildDrafts &amp;ndash;watch&lt;/code&gt;&lt;br&gt;
    编译并产生博客静态资源&lt;br&gt;
    &lt;code&gt;hugo &amp;ndash;theme=hugo-future-imperfect &amp;ndash;baseUrl=&amp;ldquo;&lt;a href=&#34;http://YOUR_GITHUB_ACCOUNT.github.io/&amp;quot;&#34;&gt;http://YOUR_GITHUB_ACCOUNT.github.io/&amp;quot;&lt;/a&gt;&lt;/code&gt;&lt;br&gt;
    这样目录会产生public目录和下面各种js、css、html静态资源，这些就是我们博客网站展现的资源，即后面要上传到github的东东。&lt;/p&gt;

&lt;h3 id=&#34;提交至github:f779394c000b834c435e35a4c53a5ecd&#34;&gt;提交至Github&lt;/h3&gt;

&lt;p&gt;好了，终于到了github登场了。在github上创建一个存放你的博客内容的仓库,取名为&lt;code&gt;YOUR_GITHUB_ACCOUNT.github.io&lt;/code&gt;,进入public目录，执行如下git命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git remote add origin https://github.com/YOUR_GITHUB_ACCOUNT/YOUR_GITHUB_ACCOUNT.github.io.git
git add -A
git commit -m &amp;quot;first commit&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;嗯,到此你就可以访问&lt;a&gt;&lt;a href=&#34;http://YOUR_GITHUB_ACCOUNT.github.io&#34;&gt;http://YOUR_GITHUB_ACCOUNT.github.io&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;日常新建博客:f779394c000b834c435e35a4c53a5ecd&#34;&gt;日常新建博客&lt;/h3&gt;

&lt;p&gt;如果想添加新的博客，则重复在YOUR_LOCAL_DIR(即content上级目录)目录运行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new posts/second_post.md
hugo 
hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后进入public目录的git repo提交修改到github即可。&lt;/p&gt;

&lt;p&gt;打完收工！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>